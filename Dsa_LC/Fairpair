import java.util.*;
class Solution{
    public static int lowerbound(int nums[],int s,int e,int t){
        while(s<=e){
            int mid=s+(e-s)/2;
            if(nums[mid]>=t){
                e=mid-1;
            }
            else{
                s=mid+1;
            }
        }
        return s;
    }
    public static int upperbound(int nums[],int s,int e,int t){
        while(s<=e){
            int mid=s+(e-s)/2;
            if(nums[mid]<=t){
                s=mid+1;
            }
            else{
                e=mid-1; 
            }
        }
        return e;
    }
    public static long fairpair(int nums[],int lower,int upper){
        Arrays.sort(nums);
        long count=0;
        for(int i=0;i<nums.length;i++){
            int low=lowerbound(nums,i+1,nums.length-1,lower-nums[i]);
            int high=upperbound(nums,i+1,nums.length-1,upper-nums[i]);
            if(low<=high){
                count+=high-low+1;
            }
        }
        return (int)count;
    }
}
public class Fairpair {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("enter the lower");
        int lower =sc.nextInt();
        System.out.println("enter the upper");
        int upper =sc.nextInt();

        int nums[]={1,7,9,2,5};
        Solution s=new Solution();
        System.out.println(s.fairpair(nums,lower,upper));
        sc.close();
    }
}
