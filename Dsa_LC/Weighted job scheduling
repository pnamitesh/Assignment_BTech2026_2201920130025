import java.util.*;

public class WeightedJobScheduling {
    static class Job {
        int start, end, profit;
        Job(int s, int e, int p) {
            start = s; end = e; profit = p;
        }
    }

    public static int jobScheduling(int[] start, int[] end, int[] profit) {
        int n = start.length;
        Job[] jobs = new Job[n];

        // Step 1: Create jobs array
        for (int i = 0; i < n; i++) {
            jobs[i] = new Job(start[i], end[i], profit[i]);
        }

        // Step 2: Sort by end time
        Arrays.sort(jobs, (a, b) -> a.end - b.end);

        // Step 3: dp[i] will store max profit till job[i]
        int[] dp = new int[n];
        dp[0] = jobs[0].profit;

        for (int i = 1; i < n; i++) {
            int includeProfit = jobs[i].profit;
            
            // Binary Search for latest job that doesn't conflict
            int l = 0, r = i - 1, lastNonConflict = -1;
            while (l <= r) {
                int mid = (l + r) / 2;
                if (jobs[mid].end <= jobs[i].start) {
                    lastNonConflict = mid;
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }

            if (lastNonConflict != -1) {
                includeProfit += dp[lastNonConflict];
            }

            // Take max of including or excluding current job
            dp[i] = Math.max(dp[i - 1], includeProfit);
        }

        return dp[n - 1];
    }

    public static void main(String[] args) {
        int[] start = {1, 2, 3};
        int[] end = {3, 4, 5};
        int[] profit = {50, 10, 40};
        System.out.println("Max Profit: " + jobScheduling(start, end, profit));
    }
}
