/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] pre, int[] in) {
        Map<Integer,Integer> map=new HashMap<>();
        for (int i=0;i<in.length;i++){
            map.put(in[i],i);
        }
        TreeNode root=buildTree(pre,0,pre.length-1,in,0,in.length,map);

        return root;
    }

    public TreeNode buildTree(int pre[],int ps,int pe,int in[],int is,int ie,Map<Integer,Integer> map){
        if (is>ie||ps>pe) return null;

        TreeNode root =new TreeNode(pre[ps]);
        int inroot=map.get(root.val);
        int numsleft=inroot-is;

         root.left =buildTree(pre,ps+1,numsleft+ps,in,is,inroot-1,map);
         root.right =buildTree(pre,ps+numsleft+1,pe,in,inroot+1,ie,map);
        return root;
    }
}
