import java.util.*;
public class Cycle_detection {
    


    static class Edge{
        int src;
        int dest;

        Edge(int x,int y) {
            this.src=x;
            this.dest=y;
        }
        
    }
    public static void creategraph(ArrayList<Edge> []graph){
        for(int i=0;i<graph.length;i++){
            graph[i]=new ArrayList<Edge>();
        }
        graph[0].add(new Edge(0,2));
        graph[1].add(new Edge(1,2));
        graph[1].add(new Edge(1,3));
        graph[2].add(new Edge(2,3));
        graph[2].add(new Edge(2,1));
        graph[2].add(new Edge(2,0));
        graph[3].add(new Edge(3,1));
        graph[3].add(new Edge(3,2));
    }
    public static boolean directed_cyclic_detection(ArrayList<Edge> []graph,int curr,boolean vis[],boolean []rec_stack){

        vis[curr]=true;
        rec_stack[curr]=true;

        for(int i=0;i<graph[curr].size();i++) {
            Edge e=graph[curr].get(i);
            if(rec_stack[e.dest]){
                return true;
            }
            else if (vis[e.dest]==false){
                if(directed_cyclic_detection(graph, e.dest, vis, rec_stack)) return true;
            }
            
        }  
        rec_stack[curr]=false;
        return false;
        
    }

    public static void main(String[] args) {
        int v=6;
        ArrayList<Edge> []graph=new ArrayList[v];
        boolean vis[]=new boolean[v];
        creategraph(graph);
        boolean rec_stack[]=new boolean[v];
// for non connected components
        for(int i=0;i<v;i++){
            if (!vis[i]) { // Check if node is unvisited
                boolean iscycle = directed_cyclic_detection(graph, i, vis, rec_stack);
                if (iscycle) {
                    System.out.println(true); // or System.out.println("Cycle Detected");
                    break;
                }
            }
        }
        
        
    }


}
